name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate root config.js from secrets
        run: |
          cat > config.js << 'EOF'
          // Firebase Configuration - Generated by GitHub Actions
          // This file is automatically generated during deployment
          window.__FIREBASE_CONFIG__ = {
            apiKey: "${{ secrets.FIREBASE_API_KEY }}",
            authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
            projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
            storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
            messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
            appId: "${{ secrets.FIREBASE_APP_ID }}",
            measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          };
          EOF

      - name: Generate landing firebase-config.js from secrets
        run: |
          cat > landing/firebase-config.js << 'EOF'
          // Firebase Configuration for Landing Page
          // This allows the landing page to access the real branch count
          
          // Firebase configuration - will be dynamically generated during deployment
          // This should be injected by GitHub Actions via window.__FIREBASE_CONFIG__
          const firebaseConfig = window.__FIREBASE_CONFIG__;
          
          if (!firebaseConfig) {
            console.error('❌ Firebase configuration not found. Make sure GitHub Actions is properly configured to inject window.__FIREBASE_CONFIG__');
          }
          
          // Initialize Firebase
          if (typeof firebase !== 'undefined' && firebaseConfig) {
              firebase.initializeApp(firebaseConfig);
              const db = firebase.firestore();
              
              // Function to get branch count
              window.getBranchCount = async function() {
                  try {
                      // Try to get count from 'prompts' collection first
                      let snapshot = await db.collection('prompts').get();
                      if (!snapshot.empty) {
                          return snapshot.size;
                      }
                      
                      // Fallback to 'branches' collection
                      snapshot = await db.collection('branches').get();
                      return snapshot.size;
                  } catch (error) {
                      console.warn('Could not fetch branch count from Firebase:', error);
                      return null;
                  }
              };
          } else {
              console.warn('Firebase not loaded or config not available');
          }
          EOF

      - name: Generate garage config.js from secrets
        run: |
          cat > garage/config.js << 'EOF'
          // Firebase Configuration for Hackly
          // This file will be dynamically generated during deployment with GitHub Actions
          // The configuration will be injected by the GitHub Actions workflow
          
          // This file should be generated by GitHub Actions and contain the Firebase config
          window.__FIREBASE_CONFIG__ = {
            apiKey: "${{ secrets.FIREBASE_API_KEY }}",
            authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
            projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
            storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
            messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
            appId: "${{ secrets.FIREBASE_APP_ID }}",
            measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          };
          EOF

      - name: Generate garage firebase-config.js from secrets
        run: |
          cat > garage/scripts/config/firebase-config.js << 'EOF'
          // Firebase Configuration
          // This file will be dynamically generated during deployment with GitHub Actions
          
          // Check if we have the dynamic config from GitHub Actions
          if (typeof window !== 'undefined' && window.__FIREBASE_CONFIG__) {
            // Use the dynamically generated config from GitHub Actions
            const firebaseConfig = window.__FIREBASE_CONFIG__;
            
            // Initialize Firebase with the dynamic config
            if (typeof firebase !== 'undefined') {
              const app = firebase.initializeApp(firebaseConfig);
              const analytics = firebase.analytics();
              const db = firebase.firestore();
              
              // Export for use in other modules
              window.firebaseApp = app;
              window.firebaseAnalytics = analytics;
              window.firebaseDb = db;
            }
          } else {
            // No fallback - require proper configuration
            console.error('❌ Firebase configuration not found. Make sure GitHub Actions is properly configured to inject window.__FIREBASE_CONFIG__');
          }
          
          // Export a function to get the Firebase instance
          export function getFirebaseApp() {
            return window.firebaseApp;
          }
          
          export function getFirebaseAnalytics() {
            return window.firebaseAnalytics;
          }
          
          export function getFirebaseDb() {
            return window.firebaseDb;
          }
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
